@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.ContentPage>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Cms.Core.Services;

@using Umbraco.Cms.Core.Models;
@using GI.BackOffice
@using BreadcrumbViewData = Clean.Site.Models.ViewData.BreadcrumbViewData

@inject IUserService UserService;

@{
	Layout = "Master.cshtml";
}


@{
    var homePage = Model.Ancestor<HomePage>();

    var author = Model.Value<int>("author");
    var user = UserService.GetUserById(author);
    var topImage = homePage.Value<MediaWithCrops<Image>>("topImage");
    var bottomImage = homePage.Value<MediaWithCrops<Image>>("bottomImage");

    <img class="nk-page-background-top" src="@topImage?.GetUrlWebp()" alt="">
    <img class="nk-page-background-bottom" src="@bottomImage?.GetUrlWebp()" alt="">

    var summary = Model.MainContent
        ?.Where(x => x?.ContentUdi != null 
                    && x.Content.ContentType.Alias == "summaryTextRow" 
                    && (x.Settings as SummaryTextRowSettings)?.AsPartOfSummary == true)
        .ToList();

    HtmlString tocRendered = HtmlString.Empty;

    if (summary.Any())
    {
        // ReSharper disable once Mvc.PartialViewNotResolved
        var toc = await Html.PartialAsync("sidebar/tableOfContent", summary);
        tocRendered = new HtmlString(toc.ToHtmlString());
    }

    var readAlsoRendered = new HtmlString("");
    @if (Model.ListOfContent != null && Model.ListOfContent.Any())
    {
        @* ReSharper disable once Mvc.PartialViewNotResolved *@
        var readAlso = await Html.PartialAsync("sidebar/readAlso", Model.ListOfContent);
        readAlsoRendered = new HtmlString(readAlso.ToHtmlString());
    }
}


<!-- Main Content-->
<div class="container">
    <div class="nk-gap-1"></div>
    @await Html.PartialAsync("~/Views/Partials/breadcrumb.cshtml", BreadcrumbViewData.FormHistory(Model))
    
    @if (summary.Any())
    {
        <div class="row vertical-gap on-phonescreen">
            <div class="col-lg-4 nk-sidebar-sticky-parent">
                <!--
                START: Sidebar
                this thing will showed only on phone screen at top

                Additional Classes:
                .nk-sidebar-left
                .nk-sidebar-right
                .nk-sidebar-sticky
                -->
                <aside class="nk-sidebar nk-sidebar-left nk-sidebar-sticky">

                    @tocRendered

                </aside>
                <!-- END: Sidebar -->

            </div>

        </div>
    }

    <div class="row vertical-gap">

        <div class="col-lg-8">

            <div class="nk-blog-post nk-blog-post-single">
                <!-- START: Post Text -->
                <div class="nk-post-text mt-0">

                    <div class="nk-post-by">
                        <div class="post-author-info" style="display: flex;">
                            <img src="/media/@user?.Avatar" alt="@user?.Name" class="rounded-circle" width="35">
                            <div class="post-author-info-meta" href="/author/@user.Id">
                                <a href="/author/@user.Id">
                                    @user?.Name
                                </a>
                            </div>
                        </div>
                        <div class="post-published-time">
                            @Model.CreateDate.ToShortDateString() @Model.CreateDate.ToShortTimeString()
                        </div>
                        <!--<div class="nk-post-categories">
                            @foreach (var tag in Model.Value<IEnumerable<string>>("tags")?.Take(3))
                            {
                                <span class="bg-main-1">@tag</span>
                            }
                        </div>-->
                    </div>
                    <div class="nk-gap"></div>

                    <div class="nk-post-img">
                        @{
                            var postImage = Model.Value<MediaWithCrops<Image>>("mainImage");

                            <img src="@postImage?.GetUrlWebp()" alt="@Model.Value("title")">
                        }
                    </div>
                    <div class="nk-gap-1"></div>
                    <h1 class="nk-post-title h4">@Model.Value("subTitle")</h1>


                    @await Html.GetBlockListHtmlAsync(Model.MainContent)

                </div>
            </div>

            @readAlsoRendered

            <div class="nk-gap-1"></div>

        </div>

        @if (summary.Any())
        {
            <div class="col-lg-4 nk-sidebar-sticky-parent on-fullscreen">
                <!--
                START: Sidebar
                ToC and read also must be in sidebar for fullscreen divices

                Additional Classes:
                .nk-sidebar-left
                .nk-sidebar-right
                .nk-sidebar-sticky
                -->
                <aside class="nk-sidebar nk-sidebar-left nk-sidebar-sticky">

                    @tocRendered

                </aside>
                <!-- END: Sidebar -->

            </div>
        }

    </div>
</div>


<script>

    function readingTime() {
        const text = document.getElementById("article").innerText;
        const wpm = 225;
        const words = text.trim().split(/\s+/).length;
        const time = Math.ceil(words / wpm);
        document.getElementById("time").innerText = time;
    }

    window.addEventListener('DOMContentLoaded', () => {
        let elements = document.querySelectorAll("div.anchor-with-link > a.anchor");
        
        let myFunction = function() {
            let hash = this.getAttribute("href").split('#')[1];
            window.location.hash = hash;
        };

        for (let i = 0; i < elements.length; i++) {
            elements[i].addEventListener('click', myFunction, false);
        }
        
        //readingTime();
    });


</script>