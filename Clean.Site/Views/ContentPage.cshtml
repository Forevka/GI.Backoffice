@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ContentModels.ContentPage>
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels;
@using Umbraco.Cms.Core.Services;

@using Umbraco.Cms.Core.Models;
@using GI.BackOffice
@using GI.BackOffice.Models.ViewModelsData
@inject IUserService UserService;

@{
	Layout = "Master.cshtml";
}

@{
    var homePage = Model.Ancestor<HomePage>();

    var author = Model.Value<int>("author");
    var user = UserService.GetUserById(author);
    var topImage = homePage.Value<MediaWithCrops<Image>>("topImage");
    var bottomImage = homePage.Value<MediaWithCrops<Image>>("bottomImage");

    <img class="nk-page-background-top" src="@topImage?.GetUrlWebp()" alt="">
    <img class="nk-page-background-bottom" src="@bottomImage?.GetUrlWebp()" alt="">

    var summary = Model.MainContent
        ?.Where(x => x?.ContentUdi != null 
                    && x.Content.ContentType.Alias == "summaryTextRow" 
                    && (x.Settings as SummaryTextRowSettings)?.AsPartOfSummary == true)
        .ToList();

    // ReSharper disable once Mvc.PartialViewNotResolved
    var toc = await Html.PartialAsync("sidebar/tableOfContent", summary);
    var tocRendered = new HtmlString(toc.ToHtmlString());

    var readAlsoRendered = new HtmlString("");
    @if (Model.ListOfContent != null && Model.ListOfContent.Any())
    {
        @* ReSharper disable once Mvc.PartialViewNotResolved *@
        var readAlso = await Html.PartialAsync("sidebar/readAlso", Model.ListOfContent);
        readAlsoRendered = new HtmlString(readAlso.ToHtmlString());
    }

    var history = new BreadcrumbViewData
    {
        History = new LinkedList<BreadcrumbJumpViewData>(new List<BreadcrumbJumpViewData>
        {
            new()
            {
                Title = "Home",
                Url = "/"
            },
            new()
            {
                Title = "Articles",
                Url = "/articles"
            },
            new()
            {
                Title = Model.Value("title")?.ToString(),
                Url = Model.Url(),
            }
        })
    };
}


<!-- Main Content-->
<div class="container">
    <div class="nk-gap-1"></div>
    @await Html.PartialAsync("~/Views/Partials/breadcrumb.cshtml", history)

    <div class="row vertical-gap on-phonescreen">
        <div class="col-lg-4 nk-sidebar-sticky-parent">
            <!--
            START: Sidebar
            this thing will showed only on phone screen at top

            Additional Classes:
            .nk-sidebar-left
            .nk-sidebar-right
            .nk-sidebar-sticky
            -->
            <aside class="nk-sidebar nk-sidebar-left nk-sidebar-sticky">

                @tocRendered

            </aside>
            <!-- END: Sidebar -->

        </div>

    </div>

    <div class="row vertical-gap">


        <div class="col-lg-8">

            <div class="nk-blog-post nk-blog-post-single">
                <!-- START: Post Text -->
                <div class="nk-post-text mt-0">
                    <div class="nk-post-img">
                        @{
                            var postImage = Model.Value<MediaWithCrops<Image>>("mainImage");

                            <img src="@postImage?.GetUrlWebp()" alt="@Model.Value("title")?.ToString()">
                        }
                    </div>
                    <div class="nk-gap-1"></div>
                    <h1 class="nk-post-title h4">@Model.Value("title")?.ToString()</h1>
                    <div class="nk-post-by">
                        <img src="/media/@user?.Avatar" alt="@user?.Name" class="rounded-circle" width="35"> by <a href="#">@user?.Name</a> in @Model.CreateDate
                        <div class="nk-post-categories">
                            @foreach (var tag in Model.Value<IEnumerable<string>>("tags"))
                            {
                                <span class="bg-main-1">@tag</span>
                            }
                        </div>
                    </div>

                    @await Html.GetBlockListHtmlAsync(Model.MainContent)

                </div>
            </div>
        </div>

        <div class="col-lg-4 nk-sidebar-sticky-parent on-fullscreen">
            <!--
            START: Sidebar
            ToC and read also must be in sidebar for fullscreen divices

            Additional Classes:
            .nk-sidebar-left
            .nk-sidebar-right
            .nk-sidebar-sticky
            -->
            <aside class="nk-sidebar nk-sidebar-left nk-sidebar-sticky">

                @tocRendered
                
                @readAlsoRendered

            </aside>
            <!-- END: Sidebar -->

        </div>



    </div>
    <div class="row vertical-gap">
        <div class="col-lg-4 on-phonescreen">
            <!--
                Read also rendered on bottom for mobile screens
            -->
            @readAlsoRendered

        </div>
    </div>
</div>


<script>
    window.addEventListener('DOMContentLoaded', () => {
        let elements = document.querySelectorAll("div.anchor-with-link > a.anchor");
        
        let myFunction = function() {
            let hash = this.getAttribute("href").split('#')[1];
            window.location.hash = hash;
        };

        for (let i = 0; i < elements.length; i++) {
            elements[i].addEventListener('click', myFunction, false);
        }
    });

</script>